API Node:
---------
     API stands for Application Programming Interface, which is a mechanism that allows two applications to exchange information using a set of rules. When we interact with an application as end-users, we typically do so through a user interface. This allows us to view application data and allows us to perform different operations or actions within the application. 

API CONTRACT:
-------------
 * Tell you what you can do with the API 
 * Definition of the API request and responses.
     
API LOGIC
----------
 How the data is processed and transforemed to perform the function of the API
 
API Connectivity:
-----------------
How the API is able to push and pull data to backend system

1. Endpoint

The Endpoint is the Address that you'd like to send your request or make a call to. The endpoint indicates how you access the resource usually in a styled way that gives it more visual attention. It is the most important aspect of an API because this is what the developers will implement to make their requests.  Below is an example of an endpoint:

2. Resource

Resource refers to the type of info that the API is tagged with/to. It is the Object or Record that the API endpoint is interacting with. Below is an example of resource:

5. Headers

Headers are additional details provided for communication between the client and the server.  Its job is to represent the metadata associated with an API request and response.  The most common types of headers are:



Components used in api documentation

*URl 
*End points
*query parameters -- represent by ?
*path parameters
*request and response body
*status codes

  Status Code	Description
  ----------------------------------
1xx	 --> indicates an information message only
2xx	 --> indicates success of some kind
3xx	 --> redirects the client to another URL
4xx  --> indicates an error on the client's part
5xx	 --> indicates an error on the server's part

Assertion in api

 *Status code and string
 *Response time
 *Headers and cookies
 *response body --- pm.response.json();
 *request body  --- JSON.parse(pm.request.body.row) //JSON.parse used to convert js to json
                    XML2Json(pm.response.text()) //convert xml to json
                    JSON.stringify(object) //convert json to js
					
					

Command for Run API in Newman
-------------------------------------------
newman run my_api_collection.json my_environment.json

-e, --environment: Specifies an environment file.
-d, --iteration-data: Specifies a data file to use for iteration.
-g, --globals: Specifies a file containing global variables.
-n, --iteration-count: Specifies the number of iterations to run.
-r, --reporters: Specifies the reporters to use for generating reports (e.g., cli, json, html, junit).
-x, --suppress-exit-code: Specifies whether Newman should return a non-zero exit code for failed runs.

System.getProperty("user.dir") --> give current project address

-----------  Data driven testing in postman  --------------

  variable=pm.iterationData.get("columnName")
  postman.setNextRequest(null)//inside mentaion methodName 

1)pm.variables.replaceIn('{{$randomFullName}}') -- take randomname
2) pm.expect(tv4.validate(jsonData,schema)).to.be.true -- validate schema


--------  Array Methods ---------
1)find:
--------
Purpose: The find method is used to find the first element in an array that satisfies a provided condition. It returns the value of the first element found, otherwise undefined is returne

let numbers = [1, 2, 3, 4, 5];
let found = numbers.find(element => element > 2);
// found is 3

2)filter:
-----------
Purpose: The filter method creates a new array with all elements that pass a provided condition implemented by the provided function.

let numbers = [1, 2, 3, 4, 5];
let filtered = numbers.filter(element => element % 2 === 0);
// filtered is [2, 4]

3)map:
-----------
Purpose: The map method creates a new array populated with the results of calling a provided function on every element in the calling array.

let numbers = [1, 2, 3, 4, 5];
let squared = numbers.map(element => element ** 2);
// squared is [1, 4, 9, 16, 25]

4)reduce:
-----------
Purpose: The reduce method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.

let numbers = [1, 2, 3, 4, 5];
let sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0);
// sum is 15
 
----------- Mock Api(Mock server) --------------

A mock server is a simulated server environment that mimics the behavior of a real server. It's typically used in software development and testing processes when the actual server is not available or when developers want to test their applications without interacting with real external systems.

Mock servers are particularly useful during early stages of development when the actual services might not be fully developed or available, as well as for testing edge cases and error handling without causing disruptions to real systems. They help in improving the efficiency and reliability of software development by enabling developers to isolate and test specific components of their applications in a controlled environment.

----------- Jenkins ------------------

Jenkins:

Jenkins is an automation server primarily used for continuous integration (CI) and continuous delivery (CD) processes.
It provides a platform for automating various aspects of the software development lifecycle, including building, testing, and deploying software.
Jenkins can integrate with version control systems, build tools, testing frameworks, and deployment tools through a vast ecosystem of plugins.
It enables developers to define and configure pipelines that automate the execution of tasks such as compiling code, running tests, and deploying applications.
Jenkins is typically used to manage complex workflows involving multiple stages and environments, enabling teams to implement robust CI/CD practices.

In summary, Jenkins is a comprehensive automation server used for managing the entire software development lifecycle, while Newman is a specialized tool for running Postman collections, particularly suited for API testing and monitoring. They can be used together within a CI/CD pipeline, with Jenkins orchestrating the overall process and Newman executing specific tests or tasks related to API testing.


1. Jobs:-  Jobs are the basic unit of work in Jenkins. They represent tasks such as building a project, running tests, or deploying an application. Jenkins supports various types of jobs, including freestyle projects, pipeline projects, and multi-configuration projects.

2. Builds:-  A build is an instance of a job execution. When a job is triggered, Jenkins starts a build to perform the defined tasks, such as compiling code, running tests, and packaging artifacts.

3. Views:- Views provide a way to organize and categorize jobs within Jenkins. There are different types of views, including list views, nested views, and dashboard views, which allow users to group related jobs and manage them more effectively.

4. Plugins:- Plugins extend the functionality of Jenkins by adding new features, integrations, and capabilities. Jenkins has a vast ecosystem of plugins covering various aspects of software development, including version control systems, build tools, testing frameworks, deployment tools, and more.

Pipelines: Pipelines enable users to define complex workflows as code using the Jenkins Pipeline DSL (Domain-Specific Language). Pipelines allow for more structured and maintainable automation, supporting stages, parallel execution, conditional logic, error handling, and integration with version control systems.

Nodes/Agents: Nodes, also known as agents or slaves, are the worker machines where builds and other tasks are executed. Jenkins can distribute work across multiple nodes, allowing for parallel execution and scalability.

Schedulers: Schedulers control when and how jobs are triggered in Jenkins. Jenkins provides several built-in triggers, such as cron-based scheduling, SCM polling, and triggering builds remotely.

Authentication and Authorization: Jenkins provides mechanisms for user authentication and authorization to control access to its features and resources. Users can be authenticated using various methods, including local user accounts, LDAP, Active Directory, and OAuth. Authorization strategies define what actions users are allowed to perform within Jenkins.

Monitoring and Logging: Jenkins provides monitoring and logging capabilities to track the status of builds, view build logs, and monitor resource usage. Administrators can configure monitoring tools, such as Metrics and Prometheus plugins, to collect performance metrics and monitor the health of Jenkins instances.



--------------REST ASSURED-----------------------

REST Assured is a popular Java library used for testing RESTful APIs. It provides a fluent interface that makes it easy to write concise and readable tests for HTTP requests and responses. With REST Assured, developers can easily perform actions like sending HTTP requests, validating responses, and extracting data from JSON or XML payloads. It's commonly used in automated testing frameworks and is particularly well-suited for testing web services and APIs built on the REST architectural style.

In Rest Assured we write script using gherkin language

 1) GIVEN()-> Used to give the body, headers, preconditions and parameters
 2) WHEN() -> Used to give HTTP methods
 3) THEN() -> Used to do Assertions

Static imports
----------------------------
import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import static io.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchemaInClasspath;

Json Libraries
--------------

Jackson: Jackson is one of the most widely used JSON processing libraries for Java. It provides high-performance JSON parsing and generation with a simple and intuitive API.

Gson: Gson is another popular JSON library developed by Google. It can be used to serialize and deserialize Java objects to and from JSON.

JSON.simple: JSON.simple is a lightweight library for parsing and generating JSON data in Java. It provides simple APIs for parsing JSON strings and creating JSON objects.

JSON-java (org.json): JSON-java is a simple Java library for JSON processing. It provides classes for parsing JSON strings and manipulating JSON objects.

JsonPath: JsonPath is not a JSON parsing library itself but rather a JSON processing library that allows you to query JSON data using XPath-like expressions.

Path Parameters: Using path parameters in the URL.
-------------------------------------------------
given().
    pathParam("userId", 123).
when().
    get("/users/{userId}").
then().
    statusCode(200);

Query parameters to the request.
----------------------------------
given().
    queryParam("name", "John").
when().
    get("/users").
then().
    statusCode(200);

Basic Authentication:
----------------------
given().
    auth().basic("username", "password").
when().
    get("/secured/resource").
then().
    statusCode(200);

OAuth 1.0:
----------------------
given().
    auth().oauth("consumerKey", "consumerSecret", "accessToken", "accessTokenSecret").
when().
    get("/secured/resource").
then().
    statusCode(200);
OAuth 2.0 (Bearer Token):
----------------------------------
given().
    auth().oauth2("yourAccessToken").
when().
    get("/secured/resource").
then().
    statusCode(200);
Bearer Token:
------------------------------------
given().
    header("Authorization", "Bearer yourAccessToken").
when().
    get("/secured/resource").
then().
    statusCode(200);
Preemptive Basic Authentication (Sending credentials with every request):
--------------------------------------------------------------------
given().
    auth().preemptive().basic("username", "password").
when().
    get("/secured/resource").
then().
    statusCode(200);


---------------GraphQL API---------------------------------

GraphQL is a query language for APIs (Application Programming Interfaces) and a runtime for executing those queries with your existing data. It was developed by Facebook in 2012 and later open-sourced in 2015.

GraphQL is a query language for your API, and a server-side runtime for executing queries using a type system you define for your data. GraphQL isn’t tied to any specific database or storage engine and is instead backed by your existing code and data.


In GraphQL, the primary HTTP method used for making requests is typically POST. This is because GraphQL requests are sent as POST requests to a single endpoint, usually /graphql, and the GraphQL query or mutation is sent as the body of the request.
 
GraphQl Operations:
--------------------
Query --> used to read the data
Mutation --> write the data
Subscriptions -->listen for data


Queries: Used to read data from the GraphQL API.
-------------------------------------------------------
query {
  fieldName {
    subField1
    subField2
    # Add more fields as needed
  }
}

Mutations: Used to modify data on the GraphQL server.
--------------------------------------------------------
mutation {
  mutationName(input: { field1: value1, field2: value2 }) {
    affectedField1
    affectedField2
    # Add more fields as needed
  }
}
Fields: Represent individual pieces of data that can be queried or mutated.
-------------------------------------------------------------------------------
query {
  user {
    id
    name
    email
  }
}



Arguments: Used to pass parameters to fields or directives.
------------------------------------------------------------------------
query {
  user(id: "123") {
    name
    email
  }
}
Fragments: Reusable units of fields.
------------------------------------------
fragment UserInfo on User {
  id
  name
  email
}

query {
  user(id: "123") {
    ...UserInfo
  }
}
Directives: Used to conditionally include fields or execute logic.
------------------------------------------------------------------
Copy code
query {
  user(id: "123") {
    name
    email
    isAdmin @include(if: $isAdmin)
  }
}
Variables: Used to provide dynamic values to queries or mutations.
----------------------------------------------------------------------
query($userId: ID!) { // specify the variable 
  user(id: $userId) {
    name
    email
  }
}

---------Filders---------
query{
 user(limit:5){ //we get only 5 user
    fields
  todos(order_by : {field : desc},limit : 2){
    fields

todos(where: {field :{_eq: value}}){
    fields

} 
}
}





